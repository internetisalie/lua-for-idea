<!--
  ~ Copyright 2010 Jon S Akhtar (Sylvanaar)
  ~
  ~   Licensed under the Apache License, Version 2.0 (the "License");
  ~   you may not use this file except in compliance with the License.
  ~   You may obtain a copy of the License at
  ~
  ~   http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~   Unless required by applicable law or agreed to in writing, software
  ~   distributed under the License is distributed on an "AS IS" BASIS,
  ~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~   See the License for the specific language governing permissions and
  ~   limitations under the License.
  -->

<idea-plugin url="http://bitbucket.org/sylvanaar2/lua-for-idea/" version="2">
    <name>Lua</name>
    <id>Lua</id>
    <version>1.0a40</version>
    <!--##teamcity[buildNumber '1.0a40']-->
    <idea-version since-build="120.152" until-build="120.9999"/>
    <category>Custom Languages</category>
    <vendor url="https://www.ohloh.net/accounts/sylvanaar" email="sylvanaar@mindspring.com">sylvanaar</vendor>
    
    <description><![CDATA[
    <html>
        <h3>Lua language integration for IntelliJ</h3>
        <br>
        <b>Features:</b>
        <br>
            <ul>
                <li>Type Inference Based Completions (<b>Experimental</b>)</li>
                <li>Introduce Variable Refactoring (<b>Experimental</b>)</li>
                <li>Modules support (<b>Experimental</b>)</li>
                <li>Debugger (<b>Experimental</b>)</li>
                <li>LuaDoc Creation, Highlighting and Folding</li>
                <li>Live Templates ("Zen Lua")</li>
                <li>Custom API Support including custom function signatures and documentation</li>
                <li>Lua Standard Library Information via Quickhelp (ctrl-Q)</li>
                <li>Goto Symbol</li>
                <li>Safe Delete</li>
                <li>Rename Identifier</li>
                <li>JavaHelp For Lua 5.1</li>
                <li>Go to definition</li>
                <li>find usages</li>
                <li>Code formatting</li>
                <li>Speculative completion as an option (Settings|Lua)</li>
                <li>Code completion</li>
                <li>1 quickfix</li>
                <li>6 code intentions</li>
                <li>11 code inspection</li>
                <li>Script execution and run configurations</li>
                <li>Kahlua REPL Console</li>
                <li>Lua REPL Console</li>
                <li>Structure view</li>
                <li>Syntax checking</li>
                <li>Highlighting of Upvalues, Parameters and Fields</li>
                <li>Highlighting global vs local variables</li>
                <li>Customizable Syntax highlighting</li>
                <li>Code folding for code blocks and comments</li>
                <li>Brace Matching for do blocks, long strings and comments, and (, { , [</li>
                <li>Minor feature: comment in/out.</li>
            </ul>
        </html>
        ]]></description>
    <change-notes><![CDATA[
        <html>
        <dl>
            <dt>1.0a40</dt>
            <dd>Improvements to completions and type inferences</dd><br>
            <dt>1.0a26-39</dt>
            <dd>Bug Fixes</dd><br>
            <dt>1.0a24-5</dt>
            <dd>Introduces type inference based completions. Very experimental. Large number of pending fixes, disabled by default</dd><br>
            <dt>1.0a19-23</dt>
            <dd>Bug Fixes</dd><br>
            <dt>1.0a18</dt>
            <dd>IDEA 11 Support (110+)</dd><br>
            <dt>1.0a17</dt>
            <dd>IDEA 11 Support</dd><br>
            <dt>1.0a16</dt>
            <dd>Bug Fixes</dd><br>
            <dt>1.0a15</dt>
            <dd>Major performance fixes for various global variable cases</dd><br>
            <dt>1.0a14</dt>
            <dd>Introduce Variable Refactoring (experimental)</dd><br>
            <dt>1.0a12-3</dt>
            <dd>Bug Fixes</dd><br>
            <dt>1.0a11</dt>
            <dd>Added the "suspicious global creation" and "Parameter hides implicit self" inspection</dd><br>
            <dt>1.0a10</dt>
            <dd>Fix the error reporter and language console up down arrow keys to cylcle through command history</dd><br>
            <dt>1.0a06-9</dt>
            <dd>Minor fixes</dd><br>
            <dt>1.0a03-5</dt>
            <dd>Modules support</dd><br>
            <dt>1.0a01-2</dt>
            <dd>Debugger support</dd><br>
            <dt>0.9.94-5</dt>
            <dd>Misc Fixes</dd><br>
            <dt>0.9.93</dt>
            <dd>Field renaming and luadoc generation for tables</dd><br>
            <dt>0.9.92</dt>
            <dd>Fix renaming of parameters</dd><br>
            <dt>0.9.91</dt>
            <dd>Bug fixes. Improved the unbalanced assignment handling. Doclua enhancement for Corona</dd><br>
            <dt>0.9.90</dt>
            <dd>Fix Refactor|Rename not working for parameters</dd><br>
            <dt>0.9.89</dt>
            <dd>Fix for PyCharm compatibility issue.</dd><br>
            <dt>0.9.87-8</dt>
            <dd>Formatter fixes for comments</dd><br>
            <dt>0.9.86a</dt>
            <dd>Disabled the copyright optional dependency - it was not optional for everyone</dd><br>
            <dt>0.9.86</dt>
            <dd>Extremely aggressive completions as an option "Enable Additional Completions"</dd><br>
            <dt>0.9.85</dt>
            <dd>Autogenerate LuaDoc function comment on ---ENTER</dd><br>
            <dt>0.9.84</dt>
            <dd>LuaDoc improvements</dd><br>
            <dt>0.9.83</dt>
            <dd>Copied the grooovydoc implementation for use with LuaDoc. Attempt at identifier resolution in modules. Copyright support</dd><br>
            <dt>0.9.82</dt>
            <dd>Complete revamp of the API documentation system.</dd><br>
            <dt>0.9.81</dt>
            <dd>LuaDoc highlighting and folding. Bugfix for missing intention examples</dd><br>
            <dt>0.9.80</dt>
            <dd>EAP 10.5 Support, Lua SDK version determined via lua.exe vs luac.exe (LuaJIT 2.0 support)</dd><br>
            <dt>0.9.79</dt>
            <dd>Major parsing speed improvement. New intention for string.* function calls</dd><br>
            <dt>0.9.78</dt>
            <dd>Basic language console implementation for REPL with the standard lua interpreter</dd><br>
            <dt>0.9.77</dt>
            <dd>Memory usage tuning. Removed some caching</dd><br>
            <dt>0.9.75-6</dt>
            <dd>New SDK implementation (You must recreate your SDK's). Added option to allow help and parameter completion for upvalued/aliased globals</dd><br>
            <dt>0.9.74</dt>
            <dd>Pluggable quickhelp API (lua based)</dd><br>
            <dt>0.9.72-3</dt>
            <dd>Starter set of 4 live templates fork, fori, ift, tnil (type and press tab)</dd><br>
            <dt>0.9.71</dt>
            <dd>Point Lua documenter at the lua.org docs</dd><br>
            <dt>0.9.70</dt>
            <dd>Handling of "self" in completions and reference resolution</dd><br>
            <dt>0.9.67-9</dt>
            <dd>Smart dedent causing trouble again. So it is disabled for now</dd><br>
            <dt>0.9.66</dt>
            <dd>Undo a change which made projects non-creatable</dd><br>
            <dt>0.9.65</dt>
            <dd>Don't create src directory for new projects. Try to be compatible with new Rubymine 3.1</dd><br>
            <dt>0.9.64</dt>
            <dd>Change the error reporter to use YouTrack while they are offering free hosting.</dd><br>
            <dt>0.9.63</dt>
            <dd>Fix for resolve, docs, and completions when the project SDK is not set, but the module sdk is.</dd><br>
            <dt>0.9.62</dt>
            <dd>Fix for autopopup completions outside of a statement</dd><br>
            <dt>0.9.61</dt>
            <dd>Fix for custom SDK's with compound identifiers e.g. foo.bar</dd><br>
            <dt>0.9.60</dt>
            <dd>Quick and dirty self: completions</dd><br>
            <dt>0.9.59</dt>
            <dd>Quickfix for unbalanced assignment, new inspection for access of array element 0</dd><br>
            <dt>0.9.58</dt>
            <dd>Lightning fast, stub based identifier resolving</dd><br>
            <dt>0.9.57</dt>
            <dd>Support for 3rd party library signature files, and display of parameter infos</dd><br>
            <dt>0.9.53-6</dt>
            <dd>Support for 3rd party libraries via the SDK classpath, Lua quickhelp (ctrl-q) from the html lua docs</dd><br>
            <dt>0.9.52</dt>
            <dd>Remove duplicate core lua completions</dd><br>
            <dt>0.9.51</dt>
            <dd>Compound reference support including standard Lua functions, e.g. io.write()</dd><br>
            <dt>0.9.50-Beta1-7</dt>
            <dd>Major new features, and rework of some fundamental implementations, e.g  reference resolution, if your build is marked as beta and you find bugs, you can revert to a previous version.</dd><br>
            <dt>0.9.21-23</dt>
            <dd>Fix lexer errors when indexing, smart de-dent on enter</dd><br>
            <dt>0.9.20</dt>
            <dd>Formatter tweaks</dd><br>
            <dt>0.9.19</dt>
            <dd>Fix field highlights</dd><br>
            <dt>0.9.18</dt>
            <dd>Fix TODO handling</dd><br>
            <dt>0.9.17</dt>
            <dd>Disable folding for single line table constructors</dd><br>
            <dt>0.9.16</dt>
            <dd>fixed lexing of hexadecimal numbers</dd><br>
            <dt>0.9.14</dt>
            <dd>Performance enhancements</dd><br>
            <dt>0.9.13</dt>
            <dd>safe delete (experimental)</dd><br>
            <dt>0.9.12</dt>
            <dd>versioning for IntelliJ 10</dd><br>
            <dt>0.9.11</dt>
            <dd>adds the rename identifier refactoring (experimental)</dd><br>
            <dt>0.9.10</dt>
            <dd>Fixes an edge case where too many upvalues would cause an exception</dd><br>
            <dt>0.9.8-9</dt>
            <dd>Fixes for multiple inspection annotations</dd><br>
            <dt>0.9.1-7</dt>
            <dd>Additional reference issues fixed, improved performance of editor when using the identifier highlighter</dd><br>
            <dt>0.9</dt>
            <dd>Most reference issues are fixed. QuickDocs</dd><br>
            <dt>0.8.33</dt>
            <dd>New inspection and some bug fixes.</dd><br>
            <dt>0.8.32</dt>
            <dd>fix eof parsing bug</dd><br>
            <dt>0.8.31</dt>
            <dd>stop bug report submissions from generating another bug due to logging</dd><br>
            <dt>0.8.30</dt>
            <dd>enable 3 new inspections. fix a major bug in the parser that was causing exceptions saying there were unparsed tokens</dd><br>
            <dt>0.8.25-9</dt>
            <dd>bug fixes</dd><br>
            <dt>0.8.24</dt>
            <dd>Disable auto brace closing and remove the name validator</dd><br>
            <dt>0.8.23</dt>
            <dd>more identifier fixes</dd><br>
            <dt>0.8.22</dt>
            <dd>fix resolution of identifiers used in function declarations like foo:bar(), where foo would not resolve</dd><br>
            <dt>0.8.21</dt>
            <dd>Adds code to try an rescue an incomplete parse</dd><br>
            <dt>0.8.20</dt>
            <dd>Enable identifier highlighting by default</dd><br>
            <dt>0.8.19</dt>
            <dd>Fixed many name resolution issues, improved brace handling</dd><br>
            <dt>0.8.17</dt>
            <dd>Long string literal fix</dd><br>
            <dt>0.8.16</dt>
            <dd>Long string literal fix</dd><br>
            <dt>0.8.15</dt>
            <dd>Much improved code formatting, and editor auto-indention</dd><br>
            <dt>0.8.14</dt>
            <dd>fixes for intentions, tail call marker, improved parser error recovery</dd><br>
            <dt>0.8.13</dt>
            <dd>automated error submissions</dd><br>
            <dt>0.8.10-12</dt>
            <dd>Many improvements to the code formatter (still considered experimental)</dd><br>
            <dt>0.8.9</dt>
            <dd>Identifier highlighter, javahelp topic for lua 5.1, Kahlua execution</dd><br>
            <dt>0.8.1-0.8.4</dt>
            <dd>Identifier resolution fixes</dd><br>
            <dt>0.8</dt>
            <dd>Experimental reference resolution for go to declaration and find usages. Does not work for a lot of cases. Kahlua SDK also not working</dd><br>
            <dt>0.7.13-16</dt>
            <dd>Fix the unbalanced assignment inspection for the single function call case, automatically select the interpreter from the SDK, fix structure view</dd><br>
            <dt>0.7.12</dt>
            <dd>Support for Lua SDK specification</dd><br>
            <dt>0.7.11</dt>
            <dd>Support for Lua Module Projects</dd><br>
            <dt>0.7.10</dt>
            <dd>Fixed tail call highlighting, minor bug fixes</dd><br>
            <dt>0.7.9</dt>
            <dd>Restore operation in Rubymine (tested) and other JetBrains products</dd><br>
            <dt>0.7.6-0.7.8</dt>
            <dd>Bug fixes</dd><br>
            <dt>0.7.5</dt>
            <dd>First inspection, global self usage</dd><br>
            <dt>0.7-0.7.4</dt>
            <dd>Using internal parser, instead of external annotator.</dd><br>
            <dt>0.6.5</dt>
            <dd>display key commands for Kahlua shell</dd><br>
            <dt>0.6.3 - 0.6.4</dt>
            <dd>Improve annotation when using Kahlua - now it annotates semi-instantly</dd><br>
            <dt>0.6.2</dt>
            <dd>Fix unresponsive annotator for syntax errors</dd><br>
            <dt>0.6.1</dt>
            <dd>Bug fixes, and disabling of some unimplemented features</dd><br>
            <dt>0.6</dt>
            <dd>Now using Kahlua as the built in interpreter tool, and the compiler</dd><br>
            <dt>0.5.1</dt>
            <dd>Improved the script execution interface, coded mostly from the bash plugin's implementation</dd><br>
            <dt>0.5.0</dt>
            <dd>Very basic script execution support. The lua interpreter needs to be on your path for this to work. Borrowed lots of code from the bash plugin</dd><br>
            <dt>0.4.3</dt>
            <dd>Removed some Java specific code</dd><br>
            <dt>0.4.2</dt>
            <dd>Enabled some more experimental features, run configs, and formatting. Neither really work well at the moment</dd><br>
            <dt>0.4.1</dt>
            <dd>Added application level options for syntax check type</dd><br>
            <dt>0.4.0</dt>
            <dd>Using luaj to syntax check the current file. Optional luac in next release</dd><br>
            <dt>0.3.0</dt>
            <dd>Using luac to syntax check the current file when luac is on the path.</dd><br>
            <dt>0.2.1</dt>
            <dd>Improved parser offering better code folding for functions</dd><br>
            <dt>0.2.0</dt>
            <dd>Simple block parser based code folding</dd><br>
            <dt>0.1.7</dt>
            <dd>Fix to make eg. ----[[ a single long comment instead of a short comment followed by a long comment</dd><br>
            <dt>0.1.6</dt>
            <dd>Fix to ignore newline after extended string start token</dd><br>
            <dt>0.1.5</dt>
            <dd>Customizable coloring</dd><br>
        </dl>
        </html>
        ]]></change-notes>

    <depends>com.intellij.modules.lang</depends>

    <depends optional="true" config-file="lua-copyright.xml">com.intellij.copyright</depends>

    <application-components>
        <component>
            <implementation-class>com.sylvanaar.idea.Lua.sdk.KahluaSdk</implementation-class>
        </component>
        <!--<component>-->
            <!--<implementation-class>com.sylvanaar.idea.Lua.sdk.LuaJSdk</implementation-class>-->
        <!--</component>-->
    </application-components>

    <project-components>
        <component>
            <implementation-class>com.sylvanaar.idea.Lua.lang.psi.LuaPsiManager</implementation-class>
        </component>
    </project-components>

    <actions>
        <action id="Lua.NewLuaScript" class="com.sylvanaar.idea.Lua.actions.NewLuaFileAction"
                text="Lua Script" description="Create new Lua script file">
            <add-to-group group-id="NewGroup" relative-to-action="NewFile" anchor="after"/>
        </action>
        <!--<action id="trigger.exception" class="com.sylvanaar.idea.errorreporting.TriggerExceptionAction" text="Trigger Exception">-->
            <!--<add-to-group group-id="NewGroup" relative-to-action="NewFile" anchor="after"/>-->
        <!--</action>-->
        <action id="com.sylvanaar.idea.Lua.console.RunLuaConsoleAction"
                class="com.sylvanaar.idea.Lua.console.RunLuaConsoleAction"
                text="Run Lua Console..." description="Run the Lua console">
          <add-to-group group-id="ToolsMenu" anchor="last"/>
        </action>
        <action id="com.sylvanaar.idea.Lua.actions.GenerateLuaListingAction" class="com.sylvanaar.idea.Lua.actions.GenerateLuaListingAction"
                text="Generate Lua Listing"
                description="Generate a source file annotated with comments containing the Lua byte-code for each line.">
            <add-to-group group-id="ToolsMenu" anchor="last"/>
        </action>
        <!--<action id="com.sylvanaar.idea.Lua.actions.InferFile" class="com.sylvanaar.idea.Lua.actions.InferFile"-->
                <!--text="Infer Types In File"-->
                <!--description="Run type inference in the file">-->
            <!--<add-to-group group-id="ToolsMenu" anchor="last"/>-->
        <!--</action>-->
    </actions>

    <helpset file="IDLuaHelp.jar" path="/Lua.hs" />

    <extensions defaultExtensionNs="com.intellij">
        <!-- Error reporter-->
        <errorHandler implementation="com.sylvanaar.idea.errorreporting.YouTrackBugReporter"/>

        <!-- Facet -->
        <!--<facetType id="Lua" implementation="com.sylvanaar.idea.Lua.settings.facet.LuaFacetType" />-->
        <!--<frameworkSupport id="Lua" implementation="com.sylvanaar.idea.Lua.settings.facet.LuaFacetFrameworkSupportProvider" />-->

        <!-- Repl Window -->
        <toolWindow id="Kahlua" anchor="right" icon="/icons/Lua.png"
                    factoryClass="com.sylvanaar.idea.Lua.kahlua.KahLuaInterpreterWindowFactory"/>

        <!-- Application Configuration -->
        <applicationConfigurable instance="com.sylvanaar.idea.Lua.options.LuaOptionsPanel" />
        <applicationService serviceImplementation="com.sylvanaar.idea.Lua.options.LuaApplicationSettings" />

        <!-- Project Configuration -->
        <!--<projectConfigurable  instance="com.sylvanaar.idea.Lua.settings.LuaProjectSettingsConfigurable" />-->
        <!--<projectService serviceImplementation="com.sylvanaar.idea.Lua.settings.LuaProjectSettings"-->
                        <!--serviceInterface="com.sylvanaar.idea.Lua.settings.LuaProjectSettings" />-->

        <fileTypeFactory implementation="com.sylvanaar.idea.Lua.LuaFileTypeLoader"/>

        <!-- Script Running -->
        <configurationType id="Lua" implementation="com.sylvanaar.idea.Lua.run.LuaConfigurationType"/>


        <configurationProducer id="Lua" implementation="com.sylvanaar.idea.Lua.run.LuaRunConfigurationProducer" />

        <programRunner implementation="com.sylvanaar.idea.Lua.run.LuaRunner"/>

        <!-- Script Debugging -->
        <programRunner implementation="com.sylvanaar.idea.Lua.debugger.LuaDebugRunner"/>
        <xdebugger.breakpointType implementation="com.sylvanaar.idea.Lua.debugger.LuaLineBreakpointType" />

        <!-- Editor -->
        <codeInsight.parameterInfo language="Lua" implementationClass="com.sylvanaar.idea.Lua.codeInsight.LuaParameterInfoHandler" />

        <!-- Syntax Hilighting extensions -->
        <lang.syntaxHighlighterFactory key="Lua" implementationClass="com.sylvanaar.idea.Lua.editor.highlighter.LuaSyntaxHighlighterFactory" />

        <colorSettingsPage implementation="com.sylvanaar.idea.Lua.editor.highlighter.LuaColorsPage"/>

        <readWriteAccessDetector implementation="com.sylvanaar.idea.Lua.editor.highlighter.LuaReadWriteAccessDetector" />

        <!--<quoteHandler fileType="Lua" className="com.sylvanaar.idea.Lua.editor.highlighter.LuaQuoteHandler" />-->

        <!-- Annotator extensions -->
        <annotator language="Lua" implementationClass="com.sylvanaar.idea.Lua.editor.annotator.LuaAnnotator" />

        <inspectionToolProvider id="Lua" implementation="com.sylvanaar.idea.Lua.editor.inspections.InspectionProvider"/>

        <projectService serviceInterface="com.sylvanaar.idea.Lua.lang.psi.LuaPsiElementFactory"
                    serviceImplementation="com.sylvanaar.idea.Lua.lang.psi.impl.LuaPsiElementFactoryImpl"/>


        <!--<projectService serviceImplementation="com.sylvanaar.idea.Lua.lang.psi.LuaPsiManager" />-->

        <!--Completion-->
        <typedHandler order="first" implementation="com.sylvanaar.idea.Lua.editor.completion.LuaAutoPopupHandler" id="lua.autopopup" />
        <completion.contributor language="Lua" implementationClass="com.sylvanaar.idea.Lua.editor.completion.LuaCompletionContributor" />
        <completion.confidence language="Lua" implementationClass="com.sylvanaar.idea.Lua.editor.completion.LuaCompletionConfidence" />
        <weigher implementationClass="com.sylvanaar.idea.Lua.editor.completion.LuaCompletionWeigher" key="completion" order="first" />

        <lookup.charFilter implementation="com.sylvanaar.idea.Lua.editor.completion.LuaCharFilter" />

        <!-- Lang extensions -->
        <lang.formatter language="Lua" implementationClass="com.sylvanaar.idea.Lua.lang.formatter.LuaFormattingModelBuilder"/>
        <langCodeStyleSettingsProvider implementation="com.sylvanaar.idea.Lua.lang.formatter.LuaLanguageCodeStyleSettingsProvider" />
        <codeStyleSettingsProvider implementation="com.sylvanaar.idea.Lua.lang.formatter.LuaCodeStyleSettingsProvider" />
        <!--<fileTypeIndentOptionsProvider id="Lua" implementation="com.sylvanaar.idea.Lua.lang.formatter.LuaIndentOptionsProvider"/>-->

        <lang.braceMatcher language="Lua"
                           implementationClass="com.sylvanaar.idea.Lua.lang.LuaBraceMatcher"/>


        <lang.parserDefinition language="Lua" implementationClass="com.sylvanaar.idea.Lua.lang.parser.LuaParserDefinition"/>

        <lang.commenter language="Lua" implementationClass="com.sylvanaar.idea.Lua.lang.LuaCommenter"/>


        <lang.foldingBuilder language="Lua" implementationClass="com.sylvanaar.idea.Lua.lang.LuaFoldingBuilder"/>

        <lang.documentationProvider language="Lua" order="first"
                                    implementationClass="com.sylvanaar.idea.Lua.lang.documentor.KahluaPluginDocumentationProvider" />
        <lang.documentationProvider language="Lua" order="last"
                                    implementationClass="com.sylvanaar.idea.Lua.lang.documentor.LuaDocDocumentationProvider" />
        <lang.documentationProvider language="Lua" order="last"
                                    implementationClass="com.sylvanaar.idea.Lua.lang.documentor.ContextualDocumentationProvider" />

        <lang.psiStructureViewFactory language="Lua"
                                      implementationClass="com.sylvanaar.idea.Lua.lang.structure.LuaStructureViewFactory"/>

        <treeStructureProvider implementation="com.sylvanaar.idea.Lua.projectView.LuaProjectTreeSubElementProvider" />
        <lang.refactoringSupport language="Lua" implementationClass="com.sylvanaar.idea.Lua.refactoring.LuaRefactoringSupportProvider" />

        <itemPresentationProvider forClass="com.sylvanaar.idea.Lua.lang.psi.LuaPsiElement" implementationClass="com.sylvanaar.idea.Lua.lang.psi.presentation.LuaElementPresentationProvider" />

        <!--<constantExpressionEvaluator language="Lua" implementationClass="com.sylvanaar.idea.Lua.lang.psi.util.LuaConstantExpressionEvaluator" />-->
        
        <!--Find Usages-->
        <lang.findUsagesProvider language="Lua" implementationClass="com.sylvanaar.idea.Lua.findUsages.LuaFindUsagesProvider" />
        <usageTypeProvider implementation="com.sylvanaar.idea.Lua.findUsages.LuaUsageTypeProvider"/>
        <!--<referencesSearch implementation="com.sylvanaar.idea.Lua.findUsages.LuaAliasedElementSearcher"/>-->

        <lang.namesValidator language="Lua" implementationClass="com.sylvanaar.idea.Lua.lang.LuaNamesValidation" />

        <gotoSymbolContributor implementation="com.sylvanaar.idea.Lua.editor.LuaGotoSymbolContributor" />

        <!--<typedHandler order="first" implementation="com.sylvanaar.idea.Lua.lang.LuaTypedInsideBlockDelegate" />-->

        <enterHandlerDelegate implementation= "com.sylvanaar.idea.Lua.lang.LuaEnterHandlerDelegate"/>
        <enterHandlerDelegate implementation="com.sylvanaar.idea.Lua.lang.luadoc.editor.LuaDocEnterHandlerDelegate" />
 
        <codeInsight.lineMarkerProvider language="Lua" implementationClass="com.sylvanaar.idea.Lua.codeInsight.LuaLineMarkerProvider" />            

        <moduleType id="LUA_MODULE" implementationClass="com.sylvanaar.idea.Lua.module.LuaModuleType"/>
        <moduleConfigurationEditorProvider implementation="com.sylvanaar.idea.Lua.module.LuaModuleConfigurationEditorProvider" />
        
        <sdkType implementation="com.sylvanaar.idea.Lua.sdk.LuaSdkType"/>

        <consoleFilterProvider implementation="com.sylvanaar.idea.Lua.run.LuaLineErrorFilterProvider" />

        <library.type id="lua.library.type" implementation="com.sylvanaar.idea.Lua.library.LuaLibraryType"/>

        <!--Stubs-->
        <stubElementTypeHolder  class="com.sylvanaar.idea.Lua.lang.parser.LuaElementTypes"/>

        <stubIndex implementation="com.sylvanaar.idea.Lua.lang.psi.stubs.index.LuaFullScriptNameIndex"/>
        <stubIndex implementation="com.sylvanaar.idea.Lua.lang.psi.stubs.index.LuaGlobalDeclarationIndex" />
        <stubIndex implementation="com.sylvanaar.idea.Lua.lang.psi.stubs.index.LuaFieldIndex" />
        <stubIndex implementation="com.sylvanaar.idea.Lua.lang.psi.stubs.index.LuaCompoundDeclarationIndex" />

        <!-- Live Templates -->
        <liveTemplateContext implementation="com.sylvanaar.idea.Lua.lang.template.LuaTemplateContextType"/>
        <defaultLiveTemplatesProvider implementation="com.sylvanaar.idea.Lua.lang.template.LuaDefaultLiveTemplateProvider" />

        <liveTemplateMacro implementation="com.sylvanaar.idea.Lua.lang.template.LuaFileMacro" />
        <liveTemplateMacro implementation="com.sylvanaar.idea.Lua.lang.template.LuaFunctionMacro" />

    <!-- control -->
    <intentionAction>
      <bundleName>com.sylvanaar.idea.Lua.intentions.LuaIntentionsBundle</bundleName>
      <categoryKey>intention.category.lua/intention.category.control.flow</categoryKey>
      <className>com.sylvanaar.idea.Lua.intentions.control.FlipComparisonIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>com.sylvanaar.idea.Lua.intentions.LuaIntentionsBundle</bundleName>
      <categoryKey>intention.category.lua/intention.category.control.flow</categoryKey>
      <className>com.sylvanaar.idea.Lua.intentions.control.FlipConjunctionIntention</className>
    </intentionAction>
    <!--<intentionAction>-->
      <!--<bundleName>com.sylvanaar.idea.Lua.intentions.LuaIntentionsBundle</bundleName>-->
      <!--<categoryKey>intention.category.lua/intention.category.control.flow</categoryKey>-->
      <!--<className>com.sylvanaar.idea.Lua.intentions.control.ExpandBooleanIntention</className>-->
    <!--</intentionAction>-->
    <intentionAction>
      <bundleName>com.sylvanaar.idea.Lua.intentions.LuaIntentionsBundle</bundleName>
      <categoryKey>intention.category.lua/intention.category.control.flow</categoryKey>
      <className>com.sylvanaar.idea.Lua.intentions.control.NegateComparisonIntention</className>
    </intentionAction>


    <!-- Calls -->
    <intentionAction>
      <bundleName>com.sylvanaar.idea.Lua.intentions.LuaIntentionsBundle</bundleName>
      <categoryKey>intention.category.lua/intention.category.lua.style</categoryKey>
      <className>com.sylvanaar.idea.Lua.intentions.style.UseStringColonCallIntention</className>
    </intentionAction>
        
    <!-- comments -->
    <intentionAction>
      <bundleName>com.sylvanaar.idea.Lua.intentions.LuaIntentionsBundle</bundleName>
      <categoryKey>intention.category.lua/intention.category.comments</categoryKey>
      <className>com.sylvanaar.idea.Lua.intentions.comments.ChangeToCStyleCommentIntention</className>
    </intentionAction>
    <intentionAction>
      <bundleName>com.sylvanaar.idea.Lua.intentions.LuaIntentionsBundle</bundleName>
      <categoryKey>intention.category.lua/intention.category.comments</categoryKey>
      <className>com.sylvanaar.idea.Lua.intentions.comments.ChangeToEndOfLineCommentIntention</className>
    </intentionAction>
    </extensions>
</idea-plugin>