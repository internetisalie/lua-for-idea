## Convert parameter to map entry refactoring
############################################################################################################
############################################################################################################
#conditional.to.elvis.intention.family.name=Convert Conditional
#conditional.to.elvis.intention.name=Convert Conditional to Elvis
#conversion.not.allowed.in.non.lua.files=Refactoring is not allowed for {0}s which have occurrences in non-Lua files: \n
#convert.cannot.itself=Refactoring is not available for map parameter itself
#convert.closure.arg.to.it.intention.family.name=Convert Closure Arg To 'it'
#convert.closure.arg.to.it.intention.name=Convert closure arg to 'it'
#convert.closure.to.method.intention.family.name=Convert property to method
#convert.closure.to.method.intention.name=Convert to method
#convert.concatenation.to.gstring.intention.family.name=Convert String Concatenation to GString
#convert.concatenation.to.gstring.intention.name=Convert concatenation to GString
#convert.g.string.to.string.intention.family.name=Convert GString To String
#convert.g.string.to.string.intention.name=Convert to String
#convert.integer.to.decimal.intention.family.name=Convert To Decimal
#convert.integer.to.decimal.intention.name=Convert to decimal
#convert.integer.to.hex.intention.family.name=Convert To Hexadecimal
#convert.integer.to.hex.intention.name=Convert to hex
#convert.integer.to.octal.intention.family.name=Convert To Octal
#convert.integer.to.octal.intention.name=Convert to octal
#convert.method.to.closure.intention.family.name=Convert method to property of closure type
#convert.method.to.closure.intention.name=Convert to property
#convert.param.to.map.entry=Convert parameter to map entry
#convert.parameter.to.map.entry.intention.family.name=Convert method or closure parameters to map entries
#convert.parameter.to.map.entry.intention.name=Convert parameter to map entry
#convert.string.to.g.string.intention.family.name=Convert String To GString
#convert.string.to.g.string.intention.name=Convert to GString
#create.first.new=&Create new parameter for named arguments
#demorgans.intention.name1=Replace \\&\\& with ||
#demorgans.intention.name2=Replace || with \\&\\&
#demorgans.law.intention.family.name=DeMorgan's Law
#do.not.create.first.new=Use &existing first parameter as map for named arguments
#dynamic.property.dialog.class=&Class
#dynamic.property.dialog.type=&Type of property
#each.to.for.intention.family.name=Replace Each With For-In
#each.to.for.intention.name=Replace with For-In
#find.method.ro.closure.usages.0=Searching for usages of enclosing {0} in project files
#flip.conditional.intention.family.name=Flip Conditional
#flip.conditional.intention.name=Flip ?:
#for.to.each.intention.family.name=Replace For-In With Each
#for.to.each.intention.name=Replace with ".each"
#indexed.expression.conversion.intention.family.name=Convert [] Form To Index Method
#indexed.expression.conversion.intention.name=Convert [] access to method form
#indexing.method.conversion.intention.family.name=Convert Indexing Method To [] Form
#indexing.method.conversion.intention.name=Convert to [] form
#intention.category.closures=Closures
#intention.category.conversions=Expression conversions
#java.style.properties.invocation.intention.family.name=Change Java-style accessor invocation to Lua-style property reference
#java.style.properties.invocation.intention.name=Change to Lua-style property reference
#make.closure.call.explicit.intention.family.name=Make Closure Call Explicit
#make.closure.call.explicit.intention.name=Make closure call explicit
#make.closure.call.implicit.intention.family.name=Make Closure Call Implicit
#make.closure.call.implicit.intention.name=Make closure call implicit
#map.param.name=Map parameter &name:
#merge.else.if.intention.family.name=Merge Else If
#merge.else.if.intention.name=Merge else-if
#merge.if.and.intention.family.name=Merge Nested Ifs To ANDed Condition
#merge.if.and.intention.name=Merge if's
#perform.refactoring=Performing refactoring
#remove.parentheses.from.method.call.intention.family.name=Remove Unnecessary Parentheses from Method Call
#remove.parentheses.from.method.call.intention.name=Remove Unnecessary Parentheses
#remove.unnecessary.braces.in.g.string.intention.family.name=Remove Unnecessary Braces in GString
#remove.unnecessary.braces.in.g.string.intention.name=Remove unnecessary braces in GString
#replace.abstract.class.instance.by.map.intention.family.name=Change anonymous class to dynamic instantiation
#replace.abstract.class.instance.by.map.intention.name=Change to dynamic instantiation
#split.else.if.intention.family.name=Split Else If
#split.else.if.intention.name=Split else-if
#wrong.first.parameter.type={0} ''{1}'' is used with named arguments, but its first parameter ''{2}'' does not conform to Map type.
expand.boolean.intention.family.name=Expand Boolean
expand.boolean.intention.name=Expand boolean use to if-else
change.to.c.style.comment.intention.family.name=Replace With C-Style Comment
change.to.c.style.comment.intention.name=Replace with C-style comment
change.to.end.of.line.comment.intention.family.name=Replace With End Of Line Comment
change.to.end.of.line.comment.intention.name=Replace with end-of-line comment
flip.comparison.intention.family.name=Flip Comparison Operands
flip.comparison.intention.name=Flip {0} to {1}
flip.smth.intention.family.name=Flip Conjunction Operands
flip.smth.intention.name=Flip {0}
intention.category.comments=Comments
intention.category.control.flow=Control Flow
intention.category.lua.style=Lua-style
intention.category.lua=Lua
negate.comparison.intention.family.name=Negate Comparison
negate.comparison.intention.name=Negate {0} to {1}
